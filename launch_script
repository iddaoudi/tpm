#!/bin/bash

# Parameters
algo=$1
msize=$2
bsize=$3
threads=$4		# numactl --physcpubind ---> number of threads - 1
numa=$5			# numactl --membind ---> number of cores per NUMA node
targets=("1" "2" "3" "4" "5" "6" "7" "8" "9" "10" "11" "12" "13" "14" "15" "16")
iteration=("1" "2" "3" "4" "5" "6" "7" "8" "9" "10")

export TPM_TRACE=0
export TPM_TRACE_NO_OMPT=1
export TPM_POWER=1

frequency=$7
governor=ondemand

export TPM_MACHINE=$6
export OMP_PLACES=cores
export OMP_PROC_BIND=close

######################################################

# LD_PRELOAD
ROOT=
omp_so=${ROOT}/llvm-project/build-openmp/lib/libomp.so
trace_so=${ROOT}/tpm/trace/libtpm_trace.so
trace_no_ompt_so=${ROOT}/tpm/trace_no_ompt/libtpm_trace_no_ompt.so

######################################################

# Compile trace library part
if [[ ${TPM_TRACE} -eq 1 ]]
then
    cd trace
    rm -rf CMakeFiles/ cmake_install.cmake CMakeCache.txt Makefile libtpm_trace.so
    cmake .
    make clean && make -s
    cd -
    echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
    echo "TPM bash log: Trace OK" 
    echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
fi

if [[ ${TPM_TRACE_NO_OMPT} -eq 1 ]]
then
    cd trace_no_ompt
    rm -rf CMakeFiles/ cmake_install.cmake CMakeCache.txt Makefile libtpm_trace_no_ompt.so
    cmake .
    make clean && make -s
    cd -
    echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
    echo "TPM bash log: Trace OK" 
    echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
fi

# Compile source part
cd algorithms
make clean && make -s
cd -
echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
echo "TPM bash log: Algorithms OK" 
echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"

# Compile power control part
if [[ ${TPM_POWER} -eq 1 ]]
then
	cd power
	make clean && make -s
	cd -
	echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
	echo "TPM bash log: Power OK"
	echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
fi

######################################################

FILE_NAME=

for algorithm in ${algo[*]}
do
	for thread in ${threads[*]}
	do
		for matrix in ${msize[*]}
		do
			for tile in ${bsize[*]}
			do
				for iter in ${iteration[*]}
				do
				    for target in ${targets[*]}
                    do
                        echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
					    echo "TPM bash log: Launching" $algorithm "run with parameters" $matrix $tile $target "for" $(expr $thread + 1) "threads"
					    echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
					    export OMP_NUM_THREADS=$(expr $thread + 1)

                        if [[ "$algorithm" == "lu" ]];
                        then
                            targets=("1" "2" "3" "4" "5" "6" "7" "8")
                        fi
					    # Start server
					    if [[ ${TPM_POWER} -eq 1 ]]
					    then
					    	sudo -E power/tpm_server $(expr $thread + 1) $governor $frequency $target ${algo} & 
	                        sleep 1
                            echo "BASH LAUNCHED SERVER"
					    fi
					    # Launch runs
					    if [[ $thread -gt $numa ]]
					    then
					    	if [[ ${TPM_TRACE} -eq 1 ]]
					    	then
					    		result=$(LD_PRELOAD=$omp_so:$trace_so numactl --physcpubind=0-$thread --membind=0,1 algorithms/tpm_benchmark -a $algorithm -m $matrix -b $tile)
					    	else
					    		result=$(LD_PRELOAD=$omp_so numactl --physcpubind=0-$thread --membind=0,1 algorithms/tpm_benchmark -a $algorithm -m $matrix -b $tile)
					    	fi
					    else
					    	if [[ ${TPM_TRACE} -eq 1 ]]
					    	then
                                result=$(LD_PRELOAD=$omp_so:$trace_so numactl --physcpubind=0-$thread --membind=0 algorithms/tpm_benchmark -a $algorithm -m $matrix -b $tile)
                            elif [[ ${TPM_TRACE_NO_OMPT} -eq 1 ]]
					    	then
                                result=$(LD_PRELOAD=$omp_so:$trace_no_ompt_so numactl --physcpubind=0-$thread --membind=0 algorithms/tpm_benchmark -a $algorithm -m $matrix -b $tile)
                            else
					    		result=$(LD_PRELOAD=$omp_so numactl --physcpubind=0-$thread --membind=0 algorithms/tpm_benchmark -a $algorithm -m $matrix -b $tile)
					    	fi
					    fi
					    FILE_NAME=time_${algorithm}_${matrix}_${tile}_$(expr $thread + 1)
cat <<EOF >> ${FILE_NAME}.dat
$result 
EOF
                    done
mkdir results/${TPM_MACHINE}_${algorithm}_${matrix}_${tile}_${thread}_${frequency}_${iter}
mv *.dat results/${TPM_MACHINE}_${algorithm}_${matrix}_${tile}_${thread}_${frequency}_${iter}
				done
			done
		done
	done
done
echo "Finished"
if [[ ${TPM_POWER} -eq 1 ]]
then
	ps -ef | grep tpm_server | grep -v grep | awk '{print $2}' | sudo xargs -r kill -9
fi
